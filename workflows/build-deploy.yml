name: Build & Deploy Unity Project

on: push

jobs:
  build:
    name: Build my project ‚ú®
    runs-on: ubuntu-latest # May need to use a larger runner for larger projects
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX
          - StandaloneWindows64
          - StandaloneLinux64
          - WebGL
    steps:
      - name: Discord Workflow Start Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: ${{ env.DISCORD_WEBHOOK != '' && env.DISCORD_WEBHOOK != 'disabled' }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "üí¨ Starting CI workflow for `${{ github.repository }}` on ${{ github.ref_type }}: `${{ github.ref_name }}`. See progress at https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"

      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Discord Pre-build Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: ${{ env.DISCORD_WEBHOOK != '' && env.DISCORD_WEBHOOK != 'disabled' }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "üîß Starting `${{ matrix.targetPlatform }}` build of `${{ github.repository }}` on ${{ github.ref_type }}: `${{ github.ref_name }}`"

      # Build
      - name: Build project
        id: build
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: WebGL

      - name: Change Permissions (Mac Only)
        if: ${{ matrix.targetPlatform == 'StandaloneOSX' }}
        run: |
          sudo chmod +x build/${{ matrix.targetPlatform }}/StandaloneOSX.app/Contents/MacOS/*

      - name: Discord Build Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: ${{ env.DISCORD_WEBHOOK != '' && env.DISCORD_WEBHOOK != 'disabled' }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "‚úÖ Successfully built `${{ github.repository }}` on ${{ github.ref_type }}: `${{ github.ref_name }}` for WebGL, deploying..."

      - name: Discord Build Failure Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: ${{ failure() && env.DISCORD_WEBHOOK != '' && env.DISCORD_WEBHOOK != 'disabled' }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "‚ùóÔ∏è Build failed for `${{ github.repository }}` on ${{ github.ref_type }}: `${{ github.ref_name }}`"

      # Output
      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

      # Deploy
      - name: S3 WebGL Deploy
        if: ${{ matrix.targetPlatform == 'WebGL' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.S3_BUCKET_REGION }}
        run: |
          aws s3 cp build/WebGL/WebGL s3://${{ secrets.S3_BUCKET }}/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }} --recursive --exclude "*.br" --exclude "*.gz"
          aws s3 cp build/WebGL/WebGL s3://${{ secrets.S3_BUCKET }}/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }} --recursive --exclude "*" --include "*.data.gz" --content-type binary/octet-stream --content-encoding gzip 
          aws s3 cp build/WebGL/WebGL s3://${{ secrets.S3_BUCKET }}/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }} --recursive --exclude "*" --include "*.js.gz" --content-type application/javascript --content-encoding gzip 
          aws s3 cp build/WebGL/WebGL s3://${{ secrets.S3_BUCKET }}/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }} --recursive --exclude "*" --include "*.wasm.gz" --content-type application/wasm --content-encoding gzip
          aws s3 cp build/WebGL/WebGL s3://${{ secrets.S3_BUCKET }}/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }} --recursive --exclude "*" --include "*.data.br" --content-type binary/octet-stream --content-encoding br
          aws s3 cp build/WebGL/WebGL s3://${{ secrets.S3_BUCKET }}/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }} --recursive --exclude "*" --include "*.js.br" --content-type application/javascript --content-encoding br
          aws s3 cp build/WebGL/WebGL s3://${{ secrets.S3_BUCKET }}/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }} --recursive --exclude "*" --include "*.wasm.br" --content-type application/wasm --content-encoding br
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }}/*"

      - name: S3 Executable Deploy
        if: ${{ matrix.targetPlatform != 'WebGL' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.S3_BUCKET_REGION }}
        run: |
          (cd build/${{ matrix.targetPlatform }}/; zip -r ../../unitybuild-${{ matrix.targetPlatform }}.zip . -x \*_DoNotShip/\*;)
          aws s3 cp unitybuild-${{ matrix.targetPlatform }}.zip s3://${{ secrets.S3_BUCKET }}/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }}/unitybuild-${{ matrix.targetPlatform }}.zip
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }}/unitybuild-${{ matrix.targetPlatform }}.zip"

      - name: Discord Deploy Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: ${{ env.DISCORD_WEBHOOK != '' && env.DISCORD_WEBHOOK != 'disabled' }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "üöÄ Deployed `${{ github.repository }}` for `${{ matrix.targetPlatform }}` at: ${{ secrets.CLOUDFRONT_URL }}/${{ github.repository }}/${{ github.ref_type }}/${{ github.ref_name }}/${{ matrix.targetPlatform == 'WebGL' && 'index.html' || format('unitybuild-{0}.zip', matrix.targetPlatform) }}"

      - name: Discord Deploy Failure Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        if: ${{ failure() && env.DISCORD_WEBHOOK != '' && env.DISCORD_WEBHOOK != 'disabled' }}
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: "‚ùóÔ∏è Failed to deploy `${{ github.repository }}` for `${{ matrix.targetPlatform }}` on ${{ github.ref_type }}: `${{ github.ref_name }}`"
